# in ~/.zshenv, executed `unsetopt GLOBAL_RCS` and ignored /etc/zshrc
[ -r /etc/zshrc ] && . /etc/zshrc

path=(
    $HOME/.local/bin(N-/)
    $CARGO_HOME/bin(N-/)
    $GOPATH/bin(N-/)
    $DENO_INSTALL/bin(N-/)
    $GEM_HOME/bin(N-/)
    $GHRED_DATA_HOME/bin(N-/)
    $path
)

fpath=(
  $ZDOTDIR/fpath(N-/)
  $ZDOTDIR/plugins/zsh-completions/src(N-/)
  $ZDOTDIR/plugins/anyframe(N-/)
  $ZDOTDIR/zfunc(N-/)
  ~/.asdf/completions(N-/)
  $GHRED_DATA_HOME/completions(N-/)
  $XDG_DATA_HOME/zsh/completions(N-/)
  $fpath
)

# ヒストリの設定
export HISTFILE="$XDG_STATE_HOME/zsh_history"
HISTSIZE=1000000
SAVEHIST=1000000

# オプション
setopt print_eight_bit # 日本語ファイル名を表示可能にする
setopt no_beep # beep を無効にする
setopt no_flow_control # フローコントロールを無効にする
setopt ignore_eof # Ctrl+Dでzshを終了しない
setopt interactive_comments # '#' 以降をコメントとして扱う
setopt auto_cd # ディレクトリ名だけでcdする
setopt auto_pushd # cd したら自動的にpushdする
setopt pushd_ignore_dups # 重複したディレクトリを追加しない
setopt share_history # 同時に起動したzshの間でヒストリを共有する
setopt hist_ignore_all_dups # 同じコマンドをヒストリに残さない
setopt hist_ignore_space # スペースから始まるコマンド行はヒストリに残さない
setopt hist_reduce_blanks # ヒストリに保存するときに余分なスペースを削除する
setopt extended_glob # 高機能なワイルドカード展開を使用する

# キーバインド
# ^R で履歴検索をするときに * でワイルドカードを使用出来るようにする
bindkey '^R' history-incremental-pattern-search-backward

bindkey '^[' _ghq-fzf
function _ghq-fzf() {
  local src=$(ghq list --full-path --vcs git | fzf-tmux -p 90%,90% )
  if [ -n "$src" ]; then
    BUFFER="cd \"$src\""
    zle accept-line
  fi

  zle -R -c
}
zle -N _ghq-fzf

function awsc() {
  local src=$(aws-vault list --profiles | fzf-tmux -p 90%,90%)
  [ -n "$src" ] && aws-vault exec -n $src
}

function cdd() {
  local directory=$(
    fd -t d \
    | fzf-tmux -p 90%,90%
  )
  [ -n "$directory" ] && cd $directory
}

function gitc() {
  local branch=$(
    git branch -a \
    | fzf-tmux \
      -p 90%,90% \
      --ansi \
      --exit-0 \
      --layout=reverse \
      --info=hidden \
      --no-multi \
      --preview-window="right,65%" \
      --preview="echo {} | tr -d ' *' | xargs git lg --color=always" \
    | head -n 1 \
    | perl -pe "s/\s//g; s/\*//g; s/remotes\/origin\///g"
  )
  [ -n "$branch" ] && git switch $branch
}

function gitl() {
  local commit_id=$(
    git lg --color=always \
    | fzf-tmux \
      -p 90%,90% \
      --ansi \
      --no-sort \
      --reverse \
      --tiebreak=index \
      --preview-window="right,70%" \
      --preview="echo {} | grep -o '[a-f0-9]\{7\}' | xargs git show --color=always" \
    | grep -o '[a-f0-9]\{7\}'
  )
  [ -n "$commit_id" ] && git show $commit_id
}

## エイリアス

(( ${+commands[nvim]} )) && alias v='nvim'

if (( ${+commands[eza]} )); then
    alias ls='eza --icons --group-directories-first'
    alias l='ls -l --header --git --group'
    alias la='ls -a'
    alias lt='ls --tree'
    alias lla='ls -la --header --git --group'
fi

(( ${+commands[bat]} )) && alias cat='bat --theme ansi'

alias mkdir='mkdir -p'

alias c='clear'

alias e='exit'

# sudo の後のコマンドでエイリアスを有効にする
alias sudo='sudo '

# グローバルエイリアス
alias -g L='| less'
alias -g G='| grep'

# C で標準出力をクリップボードにコピーする
# mollifier delta blog : http://mollifier.hatenablog.com/entry/20100317/p1
if which pbcopy >/dev/null 2>&1 ; then
    # Mac
    alias -g C='| pbcopy'
elif which xsel >/dev/null 2>&1 ; then
    # Linux
    alias -g C='| xsel --input --clipboard'
elif which putclip >/dev/null 2>&1 ; then
    # Cygwin
    alias -g C='| putclip'
fi

# tar
tgz() {
  env COPYFILE_DISABLE=1 tar zcvf "$1" --exclude=".DS_Store" "${@:2}"
}

# ls color
if grep -qE "(Microsoft|WSL)" /proc/version &> /dev/null ; then
  LS_COLORS="${LS_COLORS}:ow=01;34"; export LS_COLORS
  export PATH=$PATH:/mnt/c/windows
  alias II='explorer.exe'
fi

# less
export LESSHISTFILE='-'

# Node.js
export NODE_REPL_HISTORY="$XDG_STATE_HOME/node_history"

# npm
export NPM_CONFIG_DIR="$XDG_CONFIG_HOME/npm"
export NPM_DATA_DIR="$XDG_DATA_HOME/npm"
export NPM_CACHE_DIR="$XDG_CACHE_HOME/npm"
export NPM_CONFIG_USERCONFIG="$NPM_CONFIG_DIR/npmrc"

# irb
export IRBRC="$XDG_CONFIG_HOME/irb/irbrc"

# Python
export PYTHONSTARTUP="$XDG_CONFIG_HOME/python/startup.py"

# pylint
export PYLINTHOME="$XDG_CACHE_HOME/pylint"

# SQLite3
export SQLITE_HISTORY="$XDG_STATE_HOME/sqlite_history"

# MySQL
export MYSQL_HISTFILE="$XDG_STATE_HOME/mysql_history"

# PostgreSQL
export PSQL_HISTORY="$XDG_STATE_HOME/psql_history"

# ripgrep
export RIPGREP_CONFIG_PATH="$XDG_CONFIG_HOME/ripgrep/config"

# tealdeer
export TEALDEER_CONFIG_DIR="$XDG_CONFIG_HOME/tealdeer"

# GPG
export GPG_TTY=$TTY

# Starship
eval "$(starship init zsh)"

# Zoxide
eval "$(zoxide init zsh)"
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Mise
eval "$(mise activate zsh)"

if (( ${+commands[brew]} )); then
  FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"
  # rip
  export GRAVEYARD="~/.Trash"
fi

# zsh-defer
source $ZDOTDIR/plugins/zsh-defer/zsh-defer.plugin.zsh

# load configs
for f ($ZDOTDIR/sync/*(N-.)) source $f
for f ($ZDOTDIR/defer/*(N-.)) zsh-defer source $f

# plugins
zsh-defer source $ZDOTDIR/plugins/autosuggestions/zsh-autosuggestions.zsh
zsh-defer source $ZDOTDIR/plugins/syntax-highlighting/zsh-syntax-highlighting.zsh
zsh-defer source $ZDOTDIR/plugins/zsh-history-substring-search/zsh-history-substring-search.zsh
zsh-defer source $ZDOTDIR/fpath/aws_zsh_completer.sh
zsh-defer source $XDG_CONFIG_HOME/op/plugins.sh

# anyframe
autoload -Uz anyframe-init && anyframe-init

autoload -Uz compinit && compinit

# load user .zshrc configuration file
if [ -f ${HOME}/.zshrc.mine ]; then
    source ${HOME}/.zshrc.mine
fi

# Start tmux if it's not running
if [ -z "$TMUX" ]; then
    tmux new-session -s $(whoami) -d
fi
