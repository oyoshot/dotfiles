# in ~/.zshenv, executed `unsetopt GLOBAL_RCS` and ignored /etc/zshrc
[ -r /etc/zshrc ] && . /etc/zshrc

# ヒストリの設定
export HISTFILE="$XDG_STATE_HOME/zsh_history"
HISTSIZE=1000000
SAVEHIST=1000000

# オプション
setopt print_eight_bit # 日本語ファイル名を表示可能にする
setopt no_beep # beep を無効にする
setopt no_flow_control # フローコントロールを無効にする
setopt ignore_eof # Ctrl+Dでzshを終了しない
setopt interactive_comments # '#' 以降をコメントとして扱う
setopt auto_cd # ディレクトリ名だけでcdする
setopt auto_pushd # cd したら自動的にpushdする
setopt pushd_ignore_dups # 重複したディレクトリを追加しない
setopt share_history # 同時に起動したzshの間でヒストリを共有する
setopt hist_ignore_all_dups # 同じコマンドをヒストリに残さない
setopt hist_ignore_space # スペースから始まるコマンド行はヒストリに残さない
setopt hist_reduce_blanks # ヒストリに保存するときに余分なスペースを削除する
setopt extended_glob # 高機能なワイルドカード展開を使用する

bindkey "^[[1~" beginning-of-line
bindkey "^[[4~" end-of-line

# vi
bindkey -v

bindkey -M viins 'jj' vi-cmd-mode

bindkey -M viins '^?' backward-delete-char   # DEL (0x7F)
bindkey -M viins '^H' backward-delete-char   # ^H  (0x08)
[[ -n ${terminfo[kbs]} ]] && bindkey -M viins "${terminfo[kbs]}" backward-delete-char

bindkey -M vicmd ' ' vi-forward-char
bindkey -M vicmd ' h' vi-first-non-blank       # Space + h
bindkey -M vicmd ' l' vi-end-of-line           # Space + l

select_entire_buffer() {
  zle beginning-of-line   # gg
  zle set-mark-command    # V  (リージョン開始)
  zle end-of-line         # G
}
zle -N select_entire_buffer
bindkey -M vicmd ' a' select_entire_buffer   # Space + a

# Rust
export RUST_BACKTRACE=1
export RUSTUP_HOME="$XDG_DATA_HOME/rustup"
export CARGO_HOME="$XDG_DATA_HOME/cargo"
export CARGO_TARGET_DIR="$XDG_DATA_HOME/cargo/target"
if command -v mold >/dev/null 2>&1 && command -v clang >/dev/null 2>&1; then
  export CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER="$(command -v clang)"
  export RUSTFLAGS="-C link-arg=--ld-path=$(command -v mold)"
fi

# Deno
export DENO_INSTALL="$XDG_DATA_HOME/deno"
export DENO_INSTALL_ROOT="$DENO_INSTALL"

# Python
export RYE_HOME="$XDG_CONFIG_HOME/rye"
export IPYTHONDIR="$XDG_CONFIG_HOME/jupyter"
export JUPYTER_CONFIG_DIR="$XDG_CONFIG_HOME/jupyter"

# Rubygems
export GEM_HOME="$XDG_DATA_HOME/gem"
export GEM_SPEC_CACHE="$XDG_CACHE_HOME/gem"

export BUNDLE_USER_HOME="$XDG_CONFIG_HOME/bundle"
export BUNDLE_USER_CACHE="$XDG_CACHE_HOME/bundle"
export BUNDLE_USER_PLUGIN="$XDG_DATA_HOME/bundle/plugin"

# sheldon
export SHELDON_CONFIG_DIR="$ZDOTDIR"

# gh-red
export GHRED_CONFIG_HOME="$XDG_CONFIG_HOME/gh-red"
export GHRED_DATA_HOME="$XDG_DATA_HOME/gh-red"

# Docker
export DOCKER_CONFIG="$XDG_CONFIG_HOME/docker"

# Helm
export HELM_CACHE_HOME="$XDG_CACHE_HOME/helm"
export HELM_CONFIG_HOME="$XDG_CONFIG_HOME/helm"
export HELM_DATA_HOME="$XDG_DATA_HOME/helm"

# Keras
export KERAS_HOME="$XDG_CONFIG_HOME/keras"

path=(
    $HOME/.local/bin (N-/)
    $CARGO_HOME/bin (N-/)
    $DENO_INSTALL/bin (N-/)
    $GEM_HOME/bin (N-/)
    $GHRED_DATA_HOME/bin (N-/)
    $XDG_DATA_HOME/nvim/mason/bin (N-/)
    $path
)

fpath=(
  $ZDOTDIR/fpath (N-/)
  $ZDOTDIR/plugins/zsh-completions/src (N-/)
  $ZDOTDIR/plugins/anyframe (N-/)
  $ZDOTDIR/zfunc (N-/)
  ~/.asdf/completions (N-/)
  $GHRED_DATA_HOME/completions (N-/)
  $XDG_DATA_HOME/zsh/completions (N-/)
  $fpath
)

# zsh-defer
source $ZDOTDIR/plugins/zsh-defer/zsh-defer.plugin.zsh

# load configs
for f ($ZDOTDIR/sync/*(N-.)) source $f
for f ($ZDOTDIR/defer/*(N-.)) zsh-defer source $f

# plugins
zsh-defer source $ZDOTDIR/plugins/autosuggestions/zsh-autosuggestions.zsh
zsh-defer source $ZDOTDIR/plugins/syntax-highlighting/zsh-syntax-highlighting.zsh
zsh-defer source $ZDOTDIR/plugins/zsh-history-substring-search/zsh-history-substring-search.zsh
zsh-defer source $ZDOTDIR/fpath/aws_zsh_completer.sh
zsh-defer source $ZDOTDIR/defer.zsh
zsh-defer source $XDG_CONFIG_HOME/op/plugins.sh

# Starship
(( ${+commands[starship]} )) && eval "$(starship init zsh)"

# load user .zshrc configuration file
if [ -f "${ZDOTDIR}/zshrc.local" ]; then
  source "${ZDOTDIR}/zshrc.local"
elif [ -f "${XDG_CONFIG_HOME}/zsh/zshrc.local" ]; then
  source "${XDG_CONFIG_HOME}/zsh/zshrc.local"
elif [ -f "${HOME}/zshrc.local" ]; then
  source "${HOME}/zshrc.local"
fi

{{ if eq .chezmoi.os "linux" }}
{{   if (.chezmoi.kernel.osrelease | lower | contains "microsoft") }}
ln -sf /mnt/c/Users/$(whoami)/AppData/Local/ssh-agent.sock ~/.ssh/agent.sock
export SSH_AUTH_SOCK=$HOME/.1password/agent.sock

if [ -z "$TMUX" ]; then
  cd
fi
{{   end }}
{{ end }}
